type ProductsSelled {
  id: Int!
  product: Product!
  customer: Customer!
  employee: Employee!
  quantity: Int!
  createdAt: String!
  updatedAt: String
  deletedAt: String
}

type ProductsReturned {
  id: Int!
  product: ProductsSelled!
  customer: Customer!
  reason: ClaimType!
  createdAt: String!
  updatedAt: String
  deletedAt: String
}

type ProductsNotForSale {
  id: Int!
  product: Product!
  quantity: Int!
  reason: ClaimType!
  createdAt: String!
  updatedAt: String
  deletedAt: String
}

input MoveReturned {
  id: String!
  quantity: Int!
  reason: ClaimType!
}

input MoveNotForSale {
  id: String!
  quantity: Int!
}

type Query {
  getAllProductsSelled: [ProductsSelled]
  getAllProductsReturned: [ProductsReturned]

  getUniqueProductSelled(id: Int!): ProductsSelled
  getUniqueProductReturned(id: Int!): ProductsReturned

  productMostSelled: ProductsSelled
  productMostReturned: ProductsReturned
}

type Mutation {
  moveProductsFromReturnedToNotForSale(products: [MoveReturned!]!): String!
  moveProductsFromNotForSaleToNormal(products: [MoveNotForSale!]!): String!
}
