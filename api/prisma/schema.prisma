datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum DNI_TYPES {
  V
  J
  K
  P
}

enum WORK_DAYS {
  SUNDAY
  MONDAY
  THUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
}

enum ROLES {
  EMPLOYEE
  CUSTOMER
  PARTNER
  OWNER
}

enum EMPLOYEE_ROLES {
  CUSTOMER_SERVICE
  INVENTORY_MANAGER
  SELLER
  CLEANER
  ADMINISTRATIVE
}

enum OrderStatus {
  CANCELLED
  COMPLETED
  POSTPONED
  PENDING
  ERROR
}

enum ClaimType {
  RETURN
  DONT_WANTED
  DAMAGED
  BROKEN
  PROBLEM
  NOT_WORKING
  DEFECT
}

enum ClaimStatus {
  CANCELLED
  PENDING
  REVIEWING
  COMPLETED
  DELETED
  IRRELEVANT
  ARCHIVED
  SEEN
}

enum PaymentMethod {
  MOBILE_PAY
  TRANSFERENCE
  CASH
  DEBIT
  CREDIT
  BALANCE
}

enum ClaimAction {
  REJECT
  RETURN_MONEY
  CHANGE_PRODUCTS
}

enum LogType {
  CREATED_USER_AUTH
  CREATED_CUSTOMER
  CREATED_EMPLOYEE
  CREATED_ORDER
  CREATED_PRODUCT
  CREATED_PRODUCT_RETURNED
  CREATED_PRODUCT_SELLED
  EDITED_USER_AUTH
  EDITED_CUSTOMER
  EDITED_EMPLOYEE
  EDITED_ORDER
  EDITED_PRODUCT
  EDITED_PRODUCT_RETURNED
  EDITED_PRODUCT_SELLED
  REMOVED_USER_AUTH
  REMOVED_CUSTOMER
  REMOVED_EMPLOYEE
  REMOVED_ORDER
  REMOVED_PRODUCT
  REMOVED_PRODUCT_RETURNED
  REMOVED_PRODUCT_SELLED
  ERROR_WITH_USER_AUTH
  ERROR_WITH_CUSTOMER
  ERROR_WITH_EMPLOYEE
  ERROR_WITH_ORDER
  ERROR_WITH_PRODUCT
  ERROR_WITH_PRODUCT_RETURNED
  ERROR_WITH_PRODUCT_SELLED
}

model Employee {
  id              Int               @id @default(autoincrement())
  firstName       String            @map("first_name")
  lastName        String            @map("last_name")
  address         String
  birthDate       DateTime?         @map("birth_date")
  dni             Int
  dniType         DNI_TYPES         @map("dni_type")
  salary          Float
  workDays        WORK_DAYS[]       @map("work_days")
  charge          EMPLOYEE_ROLES
  isActive        Boolean           @default(true) @map("is_active")
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @default(now()) @updatedAt @map("updated_at")
  deletedAt       DateTime?         @map("deleted_at")
  authId          Int               @unique
  auth            Auth              @relation(fields: [authId], references: [id])
  Order           Order[]
  Products_Selled Products_Selled[]
  Ticket          Ticket[]
  Claim_Messages  Claim_Messages[]
}

model Customer {
  id                Int                 @id @default(autoincrement())
  firstName         String              @map("first_name")
  lastName          String              @map("last_name")
  address           String
  dni               Int
  dniType           DNI_TYPES           @map("dni_type")
  birthDate         DateTime?           @map("birth_date")
  balance           Float               @default(0.00)
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime?           @default(now()) @updatedAt @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")
  authId            Int                 @unique
  auth              Auth                @relation(fields: [authId], references: [id])
  Order             Order[]
  Products_Selled   Products_Selled[]
  Products_Changed  Products_Changed[]
  Products_Returned Products_Returned[]
  Claim             Claim[]
  Claim_Messages    Claim_Messages[]
  Ticket            Ticket[]
  Claimed_Products  Claimed_Products[]
}

model Auth {
  id                  Int        @id @default(autoincrement())
  email               String     @unique
  password            String
  loginAttempts       Int        @default(0)
  secondsToLoginAgain Int        @default(0) @map("seconds_to_login_again")
  role                ROLES?     @default(CUSTOMER)
  createdAt           DateTime   @default(now()) @map("created_at")
  updatedAt           DateTime?  @updatedAt @map("updated_at")
  deletedAt           DateTime?  @map("deleted_at")
  Employee            Employee[]
  Customer            Customer[]
}

model Product {
  id                    String                  @id @default(uuid())
  name                  String
  stock                 Int
  price                 Float
  discounts             Float[]
  available             Boolean                 @default(true)
  sku                   String                  @default(uuid())
  coverImage            String
  images                String[]
  createdAt             DateTime                @default(now()) @map("created_at")
  updatedAt             DateTime?               @updatedAt @map("updated_at")
  deletedAt             DateTime?               @map("deleted_at")
  Order                 Order[]
  Products_Selled       Products_Selled[]
  Products_Not_For_Sale Products_Not_For_Sale[]
}

model Products_Selled {
  id                String              @id @default(uuid())
  quantity          Int
  productId         String
  customerId        Int
  employeeId        Int
  ticketId          Int
  Ticket            Ticket              @relation(fields: [ticketId], references: [id])
  product           Product             @relation(fields: [productId], references: [id])
  customer          Customer            @relation(fields: [customerId], references: [id])
  employee          Employee            @relation(fields: [employeeId], references: [id])
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime?           @updatedAt @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")
  Claimed_Products  Claimed_Products[]
  Products_Returned Products_Returned[]
  Products_Changed  Products_Changed[]
}

model Products_Returned {
  id         String          @id @default(uuid())
  productId  String
  customerId Int
  ticketId   Int
  claimId    Int
  quantity   Int
  reason     ClaimType
  product    Products_Selled @relation(fields: [productId], references: [id])
  customer   Customer        @relation(fields: [customerId], references: [id])
  claim      Claim           @relation(fields: [claimId], references: [id])
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime?       @updatedAt @map("updated_at")
  deletedAt  DateTime?       @map("deleted_at")
  Ticket     Ticket          @relation(fields: [ticketId], references: [id])
}

model Products_Not_For_Sale {
  id        String      @id @default(uuid())
  quantity  Int
  productId String
  product   Product     @relation(fields: [productId], references: [id])
  reason    ClaimType[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime?   @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
}

model Products_Changed {
  id         String          @id @default(uuid())
  ticketId   Int
  claimId    Int
  customerId Int
  productId  String
  reason     ClaimType[]
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime?       @updatedAt @map("updated_at")
  deletedAt  DateTime?       @map("deleted_at")
  claim      Claim           @relation(fields: [claimId], references: [id])
  ticket     Ticket          @relation(fields: [ticketId], references: [id])
  product    Products_Selled @relation(fields: [productId], references: [id])
  customer   Customer        @relation(fields: [customerId], references: [id])
}

model Order {
  id              Int           @id @default(autoincrement())
  total           Float
  status          OrderStatus   @default(PENDING)
  reasonForStatus String
  paymentMethod   PaymentMethod
  capture         String?
  reference       String?
  products        Product[]
  customerId      Int
  employeeId      Int?
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  deletedAt       DateTime?     @map("deleted_at")
  customer        Customer      @relation(fields: [customerId], references: [id])
  Ticket          Ticket[]
  Employee        Employee?     @relation(fields: [employeeId], references: [id])
}

model Ticket {
  id                Int                 @id @default(autoincrement())
  amount            Float
  employeeId        Int
  customerId        Int
  orderId           Int
  payment           PaymentMethod
  products          Products_Selled[]
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  deletedAt         DateTime            @map("deleted_at")
  customer          Customer            @relation(fields: [customerId], references: [id])
  employee          Employee            @relation(fields: [employeeId], references: [id])
  order             Order               @relation(fields: [orderId], references: [id])
  Claim             Claim[]
  Claimed_Products  Claimed_Products[]
  Products_Changed  Products_Changed[]
  Products_Returned Products_Returned[]
}

model Claim {
  id                Int                 @id @default(autoincrement())
  type              ClaimType
  status            ClaimStatus         @default(PENDING)
  finalAction       ClaimAction
  content           String
  subject           String
  products          Claimed_Products[]
  customerId        Int
  ticketId          Int
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime?           @updatedAt @map("updated_at")
  deletedAt         DateTime?           @map("deleted_at")
  customer          Customer            @relation(fields: [customerId], references: [id])
  ticket            Ticket              @relation(fields: [ticketId], references: [id])
  Claim_Messages    Claim_Messages[]
  Products_Returned Products_Returned[]
  Products_Changed  Products_Changed[]
}

model Claimed_Products {
  id         String          @id @default(uuid())
  quantity   Int
  customerId Int
  ticketId   Int
  claimId    Int
  productId  String
  reason     ClaimType
  createdAt  DateTime        @default(now()) @map("created_at")
  updatedAt  DateTime?       @updatedAt @map("updated_at")
  deletedAt  DateTime?       @map("deleted_at")
  Claim      Claim           @relation(fields: [claimId], references: [id])
  customer   Customer        @relation(fields: [customerId], references: [id])
  product    Products_Selled @relation(fields: [productId], references: [id])
  ticket     Ticket          @relation(fields: [ticketId], references: [id])
}

model Claim_Messages {
  id         String    @id @default(uuid())
  message    String
  images     String[]
  seen       Boolean   @default(false)
  claimId    Int
  customerId Int
  employeeId Int
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  deletedAt  DateTime? @map("deleted_at")
  customer   Customer? @relation(fields: [customerId], references: [id])
  employee   Employee? @relation(fields: [employeeId], references: [id])
  claim      Claim     @relation(fields: [claimId], references: [id])
}

model Logs {
  id          String    @id @default(uuid())
  contentPath String
  type        LogType
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime? @updatedAt @map("updated_at")
}
